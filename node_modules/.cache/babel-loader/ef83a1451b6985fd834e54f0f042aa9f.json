{"ast":null,"code":"function measureColumn(tableData) {\n  return function (column, index) {\n    var {\n      firstVisibleColumnIndex,\n      tableLeftVisibleEdge: tableStart,\n      tableRightVisibleEdge: tableEnd\n    } = tableData;\n    var leftEdge = column.offsetLeft;\n    var rightEdge = leftEdge + column.offsetWidth;\n    var isVisibleLeft = isEdgeVisible(leftEdge, tableStart, tableEnd);\n    var isVisibleRight = isEdgeVisible(rightEdge, tableStart, tableEnd);\n    var isVisible = isVisibleLeft || isVisibleRight;\n\n    if (isVisible) {\n      tableData.firstVisibleColumnIndex = Math.min(firstVisibleColumnIndex, index);\n    }\n\n    return {\n      leftEdge,\n      rightEdge,\n      isVisible\n    };\n  };\n}\n\nfunction isEdgeVisible(position, start, end) {\n  var minVisiblePixels = 30;\n  return position >= start + minVisiblePixels && position <= end - minVisiblePixels;\n}\n\nfunction getPrevAndCurrentColumns(tableData, columnData) {\n  var {\n    firstVisibleColumnIndex\n  } = tableData;\n  var previousColumnIndex = Math.max(firstVisibleColumnIndex - 1, 0);\n  var previousColumn = columnData[previousColumnIndex];\n  var currentColumn = columnData[firstVisibleColumnIndex];\n  return {\n    previousColumn,\n    currentColumn\n  };\n}\n\nexport { getPrevAndCurrentColumns, isEdgeVisible, measureColumn };","map":{"version":3,"sources":["/home/bss/Downloads/shopify/create-react-app/node_modules/@shopify/polaris/dist/esm/components/DataTable/utilities.js"],"names":["measureColumn","tableData","column","index","firstVisibleColumnIndex","tableLeftVisibleEdge","tableStart","tableRightVisibleEdge","tableEnd","leftEdge","offsetLeft","rightEdge","offsetWidth","isVisibleLeft","isEdgeVisible","isVisibleRight","isVisible","Math","min","position","start","end","minVisiblePixels","getPrevAndCurrentColumns","columnData","previousColumnIndex","max","previousColumn","currentColumn"],"mappings":"AAAA,SAASA,aAAT,CAAuBC,SAAvB,EAAkC;AAChC,SAAO,UAAUC,MAAV,EAAkBC,KAAlB,EAAyB;AAC9B,QAAM;AACJC,MAAAA,uBADI;AAEJC,MAAAA,oBAAoB,EAAEC,UAFlB;AAGJC,MAAAA,qBAAqB,EAAEC;AAHnB,QAIFP,SAJJ;AAKA,QAAMQ,QAAQ,GAAGP,MAAM,CAACQ,UAAxB;AACA,QAAMC,SAAS,GAAGF,QAAQ,GAAGP,MAAM,CAACU,WAApC;AACA,QAAMC,aAAa,GAAGC,aAAa,CAACL,QAAD,EAAWH,UAAX,EAAuBE,QAAvB,CAAnC;AACA,QAAMO,cAAc,GAAGD,aAAa,CAACH,SAAD,EAAYL,UAAZ,EAAwBE,QAAxB,CAApC;AACA,QAAMQ,SAAS,GAAGH,aAAa,IAAIE,cAAnC;;AAEA,QAAIC,SAAJ,EAAe;AACbf,MAAAA,SAAS,CAACG,uBAAV,GAAoCa,IAAI,CAACC,GAAL,CAASd,uBAAT,EAAkCD,KAAlC,CAApC;AACD;;AAED,WAAO;AACLM,MAAAA,QADK;AAELE,MAAAA,SAFK;AAGLK,MAAAA;AAHK,KAAP;AAKD,GArBD;AAsBD;;AACD,SAASF,aAAT,CAAuBK,QAAvB,EAAiCC,KAAjC,EAAwCC,GAAxC,EAA6C;AAC3C,MAAMC,gBAAgB,GAAG,EAAzB;AACA,SAAOH,QAAQ,IAAIC,KAAK,GAAGE,gBAApB,IAAwCH,QAAQ,IAAIE,GAAG,GAAGC,gBAAjE;AACD;;AACD,SAASC,wBAAT,CAAkCtB,SAAlC,EAA6CuB,UAA7C,EAAyD;AACvD,MAAM;AACJpB,IAAAA;AADI,MAEFH,SAFJ;AAGA,MAAMwB,mBAAmB,GAAGR,IAAI,CAACS,GAAL,CAAStB,uBAAuB,GAAG,CAAnC,EAAsC,CAAtC,CAA5B;AACA,MAAMuB,cAAc,GAAGH,UAAU,CAACC,mBAAD,CAAjC;AACA,MAAMG,aAAa,GAAGJ,UAAU,CAACpB,uBAAD,CAAhC;AACA,SAAO;AACLuB,IAAAA,cADK;AAELC,IAAAA;AAFK,GAAP;AAID;;AAED,SAASL,wBAAT,EAAmCT,aAAnC,EAAkDd,aAAlD","sourcesContent":["function measureColumn(tableData) {\n  return function (column, index) {\n    const {\n      firstVisibleColumnIndex,\n      tableLeftVisibleEdge: tableStart,\n      tableRightVisibleEdge: tableEnd\n    } = tableData;\n    const leftEdge = column.offsetLeft;\n    const rightEdge = leftEdge + column.offsetWidth;\n    const isVisibleLeft = isEdgeVisible(leftEdge, tableStart, tableEnd);\n    const isVisibleRight = isEdgeVisible(rightEdge, tableStart, tableEnd);\n    const isVisible = isVisibleLeft || isVisibleRight;\n\n    if (isVisible) {\n      tableData.firstVisibleColumnIndex = Math.min(firstVisibleColumnIndex, index);\n    }\n\n    return {\n      leftEdge,\n      rightEdge,\n      isVisible\n    };\n  };\n}\nfunction isEdgeVisible(position, start, end) {\n  const minVisiblePixels = 30;\n  return position >= start + minVisiblePixels && position <= end - minVisiblePixels;\n}\nfunction getPrevAndCurrentColumns(tableData, columnData) {\n  const {\n    firstVisibleColumnIndex\n  } = tableData;\n  const previousColumnIndex = Math.max(firstVisibleColumnIndex - 1, 0);\n  const previousColumn = columnData[previousColumnIndex];\n  const currentColumn = columnData[firstVisibleColumnIndex];\n  return {\n    previousColumn,\n    currentColumn\n  };\n}\n\nexport { getPrevAndCurrentColumns, isEdgeVisible, measureColumn };\n"]},"metadata":{},"sourceType":"module"}