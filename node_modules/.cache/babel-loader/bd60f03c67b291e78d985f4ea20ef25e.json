{"ast":null,"code":"import React$1, { useRef, useEffect } from 'react';\nimport { classNames } from '../../../../utilities/css.js';\nimport { focusFirstFocusableNode, handleMouseUpByBlurring } from '../../../../utilities/focus.js';\nimport { UnstyledLink as UnstyledLink$1 } from '../../../UnstyledLink/UnstyledLink.js';\nimport styles from '../../Tabs.scss.js';\n\nfunction Tab({\n  id,\n  focused,\n  siblingTabHasFocus,\n  children,\n  onClick,\n  selected,\n  url,\n  panelID,\n  measuring,\n  accessibilityLabel\n}) {\n  var wasSelected = useRef(selected);\n  var panelFocused = useRef(false);\n  var node = useRef(null); // A tab can start selected when it is moved from the disclosure dropdown\n  // into the main list, so we need to send focus from the tab to the panel\n  // on mount and update\n\n  useEffect(() => {\n    if (measuring) {\n      return;\n    } // Because of timing issues with the render, we may still have the old,\n    // in-disclosure version of the tab that has focus. Check for this\n    // as a second indicator of focus\n\n\n    var itemHadFocus = focused || document.activeElement && document.activeElement.id === id; // If we just check for selected, the panel for the active tab will\n    // be focused on page load, which we don’t want\n\n    if (itemHadFocus && selected && panelID != null && !panelFocused.current) {\n      focusPanelID(panelID);\n      panelFocused.current = true;\n    }\n\n    if (selected && !wasSelected.current && panelID != null) {\n      focusPanelID(panelID);\n    } else if (focused && node.current != null) {\n      focusFirstFocusableNode(node.current);\n    }\n\n    wasSelected.current = selected;\n  }, [focused, id, measuring, panelID, selected]);\n  var handleClick = onClick && onClick.bind(null, id);\n  var className = classNames(styles.Tab, selected && styles['Tab-selected']);\n  var tabIndex;\n\n  if (selected && !siblingTabHasFocus && !measuring) {\n    tabIndex = 0;\n  } else if (focused && !measuring) {\n    tabIndex = 0;\n  } else {\n    tabIndex = -1;\n  }\n\n  var tabContainerClassNames = classNames(styles.TabContainer, selected && styles.Underline);\n  var markup = url ? /*#__PURE__*/React$1.createElement(UnstyledLink$1, {\n    id: id,\n    url: url,\n    role: \"tab\",\n    tabIndex: tabIndex,\n    onClick: handleClick,\n    className: className,\n    \"aria-selected\": selected,\n    \"aria-controls\": panelID,\n    \"aria-label\": accessibilityLabel,\n    onMouseUp: handleMouseUpByBlurring\n  }, /*#__PURE__*/React$1.createElement(\"span\", {\n    className: styles.Title\n  }, children)) : /*#__PURE__*/React$1.createElement(\"button\", {\n    id: id,\n    role: \"tab\",\n    type: \"button\",\n    tabIndex: tabIndex,\n    className: className,\n    onClick: handleClick,\n    \"aria-selected\": selected,\n    \"aria-controls\": panelID,\n    \"aria-label\": accessibilityLabel,\n    onMouseUp: handleMouseUpByBlurring\n  }, /*#__PURE__*/React$1.createElement(\"span\", {\n    className: styles.Title\n  }, children));\n  return /*#__PURE__*/React$1.createElement(\"li\", {\n    className: tabContainerClassNames,\n    ref: node,\n    role: \"presentation\"\n  }, markup);\n}\n\nfunction focusPanelID(panelID) {\n  var panel = document.getElementById(panelID);\n\n  if (panel) {\n    panel.focus({\n      preventScroll: true\n    });\n  }\n}\n\nexport { Tab };","map":{"version":3,"sources":["/home/bss/Downloads/shopify/create-react-app/node_modules/@shopify/polaris/dist/esm/components/Tabs/components/Tab/Tab.js"],"names":["React$1","useRef","useEffect","classNames","focusFirstFocusableNode","handleMouseUpByBlurring","UnstyledLink","UnstyledLink$1","styles","Tab","id","focused","siblingTabHasFocus","children","onClick","selected","url","panelID","measuring","accessibilityLabel","wasSelected","panelFocused","node","itemHadFocus","document","activeElement","current","focusPanelID","handleClick","bind","className","tabIndex","tabContainerClassNames","TabContainer","Underline","markup","createElement","role","onMouseUp","Title","type","ref","panel","getElementById","focus","preventScroll"],"mappings":"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","sourcesContent":["import React$1, { useRef, useEffect } from 'react';\nimport { classNames } from '../../../../utilities/css.js';\nimport { focusFirstFocusableNode, handleMouseUpByBlurring } from '../../../../utilities/focus.js';\nimport { UnstyledLink as UnstyledLink$1 } from '../../../UnstyledLink/UnstyledLink.js';\nimport styles from '../../Tabs.scss.js';\n\nfunction Tab({\n  id,\n  focused,\n  siblingTabHasFocus,\n  children,\n  onClick,\n  selected,\n  url,\n  panelID,\n  measuring,\n  accessibilityLabel\n}) {\n  const wasSelected = useRef(selected);\n  const panelFocused = useRef(false);\n  const node = useRef(null); // A tab can start selected when it is moved from the disclosure dropdown\n  // into the main list, so we need to send focus from the tab to the panel\n  // on mount and update\n\n  useEffect(() => {\n    if (measuring) {\n      return;\n    } // Because of timing issues with the render, we may still have the old,\n    // in-disclosure version of the tab that has focus. Check for this\n    // as a second indicator of focus\n\n\n    const itemHadFocus = focused || document.activeElement && document.activeElement.id === id; // If we just check for selected, the panel for the active tab will\n    // be focused on page load, which we don’t want\n\n    if (itemHadFocus && selected && panelID != null && !panelFocused.current) {\n      focusPanelID(panelID);\n      panelFocused.current = true;\n    }\n\n    if (selected && !wasSelected.current && panelID != null) {\n      focusPanelID(panelID);\n    } else if (focused && node.current != null) {\n      focusFirstFocusableNode(node.current);\n    }\n\n    wasSelected.current = selected;\n  }, [focused, id, measuring, panelID, selected]);\n  const handleClick = onClick && onClick.bind(null, id);\n  const className = classNames(styles.Tab, selected && styles['Tab-selected']);\n  let tabIndex;\n\n  if (selected && !siblingTabHasFocus && !measuring) {\n    tabIndex = 0;\n  } else if (focused && !measuring) {\n    tabIndex = 0;\n  } else {\n    tabIndex = -1;\n  }\n\n  const tabContainerClassNames = classNames(styles.TabContainer, selected && styles.Underline);\n  const markup = url ? /*#__PURE__*/React$1.createElement(UnstyledLink$1, {\n    id: id,\n    url: url,\n    role: \"tab\",\n    tabIndex: tabIndex,\n    onClick: handleClick,\n    className: className,\n    \"aria-selected\": selected,\n    \"aria-controls\": panelID,\n    \"aria-label\": accessibilityLabel,\n    onMouseUp: handleMouseUpByBlurring\n  }, /*#__PURE__*/React$1.createElement(\"span\", {\n    className: styles.Title\n  }, children)) : /*#__PURE__*/React$1.createElement(\"button\", {\n    id: id,\n    role: \"tab\",\n    type: \"button\",\n    tabIndex: tabIndex,\n    className: className,\n    onClick: handleClick,\n    \"aria-selected\": selected,\n    \"aria-controls\": panelID,\n    \"aria-label\": accessibilityLabel,\n    onMouseUp: handleMouseUpByBlurring\n  }, /*#__PURE__*/React$1.createElement(\"span\", {\n    className: styles.Title\n  }, children));\n  return /*#__PURE__*/React$1.createElement(\"li\", {\n    className: tabContainerClassNames,\n    ref: node,\n    role: \"presentation\"\n  }, markup);\n}\n\nfunction focusPanelID(panelID) {\n  const panel = document.getElementById(panelID);\n\n  if (panel) {\n    panel.focus({\n      preventScroll: true\n    });\n  }\n}\n\nexport { Tab };\n"]},"metadata":{},"sourceType":"module"}