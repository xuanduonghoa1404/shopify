{"ast":null,"code":"import React$1, { useState, useRef, useCallback, useEffect } from 'react';\nimport { objectSpread2 as _objectSpread2 } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { classNames } from '../../utilities/css.js';\nimport styles from './Collapsible.scss.js';\n\nfunction Collapsible({\n  id,\n  expandOnPrint,\n  open,\n  transition,\n  children\n}) {\n  var [height, setHeight] = useState(0);\n  var [isOpen, setIsOpen] = useState(open);\n  var [animationState, setAnimationState] = useState('idle');\n  var collapsibleContainer = useRef(null);\n  var isFullyOpen = animationState === 'idle' && open && isOpen;\n  var isFullyClosed = animationState === 'idle' && !open && !isOpen;\n  var content = expandOnPrint || !isFullyClosed ? children : null;\n  var wrapperClassName = classNames(styles.Collapsible, isFullyClosed && styles.isFullyClosed, expandOnPrint && styles.expandOnPrint);\n\n  var collapsibleStyles = _objectSpread2(_objectSpread2({}, transition && {\n    transitionDuration: \"\".concat(transition.duration),\n    transitionTimingFunction: \"\".concat(transition.timingFunction)\n  }), {\n    maxHeight: isFullyOpen ? 'none' : \"\".concat(height, \"px\"),\n    overflow: isFullyOpen ? 'visible' : 'hidden'\n  });\n\n  var handleCompleteAnimation = useCallback(({\n    target\n  }) => {\n    if (target === collapsibleContainer.current) {\n      setAnimationState('idle');\n      setIsOpen(open);\n    }\n  }, [open]);\n  useEffect(() => {\n    if (open !== isOpen) {\n      setAnimationState('measuring');\n    }\n  }, [open, isOpen]);\n  useEffect(() => {\n    if (!open || !collapsibleContainer.current) return; // If collapsible defaults to open, set an initial height\n\n    setHeight(collapsibleContainer.current.scrollHeight); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    if (!collapsibleContainer.current) return;\n\n    switch (animationState) {\n      case 'idle':\n        break;\n\n      case 'measuring':\n        setHeight(collapsibleContainer.current.scrollHeight);\n        setAnimationState('animating');\n        break;\n\n      case 'animating':\n        setHeight(open ? collapsibleContainer.current.scrollHeight : 0);\n    }\n  }, [animationState, open, isOpen]);\n  return /*#__PURE__*/React$1.createElement(\"div\", {\n    id: id,\n    style: collapsibleStyles,\n    ref: collapsibleContainer,\n    className: wrapperClassName,\n    onTransitionEnd: handleCompleteAnimation,\n    \"aria-expanded\": open\n  }, content);\n}\n\nexport { Collapsible };","map":{"version":3,"sources":["/home/bss/Downloads/shopify/create-react-app/node_modules/@shopify/polaris/dist/esm/components/Collapsible/Collapsible.js"],"names":["React$1","useState","useRef","useCallback","useEffect","objectSpread2","_objectSpread2","classNames","styles","Collapsible","id","expandOnPrint","open","transition","children","height","setHeight","isOpen","setIsOpen","animationState","setAnimationState","collapsibleContainer","isFullyOpen","isFullyClosed","content","wrapperClassName","collapsibleStyles","transitionDuration","duration","transitionTimingFunction","timingFunction","maxHeight","overflow","handleCompleteAnimation","target","current","scrollHeight","createElement","style","ref","className","onTransitionEnd"],"mappings":"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","sourcesContent":["import React$1, { useState, useRef, useCallback, useEffect } from 'react';\nimport { objectSpread2 as _objectSpread2 } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { classNames } from '../../utilities/css.js';\nimport styles from './Collapsible.scss.js';\n\nfunction Collapsible({\n  id,\n  expandOnPrint,\n  open,\n  transition,\n  children\n}) {\n  const [height, setHeight] = useState(0);\n  const [isOpen, setIsOpen] = useState(open);\n  const [animationState, setAnimationState] = useState('idle');\n  const collapsibleContainer = useRef(null);\n  const isFullyOpen = animationState === 'idle' && open && isOpen;\n  const isFullyClosed = animationState === 'idle' && !open && !isOpen;\n  const content = expandOnPrint || !isFullyClosed ? children : null;\n  const wrapperClassName = classNames(styles.Collapsible, isFullyClosed && styles.isFullyClosed, expandOnPrint && styles.expandOnPrint);\n\n  const collapsibleStyles = _objectSpread2(_objectSpread2({}, transition && {\n    transitionDuration: `${transition.duration}`,\n    transitionTimingFunction: `${transition.timingFunction}`\n  }), {\n    maxHeight: isFullyOpen ? 'none' : `${height}px`,\n    overflow: isFullyOpen ? 'visible' : 'hidden'\n  });\n\n  const handleCompleteAnimation = useCallback(({\n    target\n  }) => {\n    if (target === collapsibleContainer.current) {\n      setAnimationState('idle');\n      setIsOpen(open);\n    }\n  }, [open]);\n  useEffect(() => {\n    if (open !== isOpen) {\n      setAnimationState('measuring');\n    }\n  }, [open, isOpen]);\n  useEffect(() => {\n    if (!open || !collapsibleContainer.current) return; // If collapsible defaults to open, set an initial height\n\n    setHeight(collapsibleContainer.current.scrollHeight); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    if (!collapsibleContainer.current) return;\n\n    switch (animationState) {\n      case 'idle':\n        break;\n\n      case 'measuring':\n        setHeight(collapsibleContainer.current.scrollHeight);\n        setAnimationState('animating');\n        break;\n\n      case 'animating':\n        setHeight(open ? collapsibleContainer.current.scrollHeight : 0);\n    }\n  }, [animationState, open, isOpen]);\n  return /*#__PURE__*/React$1.createElement(\"div\", {\n    id: id,\n    style: collapsibleStyles,\n    ref: collapsibleContainer,\n    className: wrapperClassName,\n    onTransitionEnd: handleCompleteAnimation,\n    \"aria-expanded\": open\n  }, content);\n}\n\nexport { Collapsible };\n"]},"metadata":{},"sourceType":"module"}